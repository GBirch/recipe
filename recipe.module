<?php
/**
 * @file
 * Contains functions for Recipe node CRUD and display.
 */

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_help().
 */
function recipe_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/recipe':
      $output = '<p>' . t('You can enable/disable bulk export formats on the <a href="@modules-page">modules page</a> in the recipes section.', array('@modules-page' => url('admin/modules', array('fragment' => 'edit-modules-recipe')))) . '</p>';
      return $output;
    case 'admin/structure/recipe/import_multi':
      $output = '<p>' . t('You can enable/disable bulk import formats on the <a href="@modules-page">modules page</a> in the recipes section.', array('@modules-page' => url('admin/modules', array('fragment' => 'edit-modules-recipe')))) . '</p>';
      return $output;
    case 'admin/config/content/recipe':
      return t('Configure the management and display of recipes.');
  }
}

/**
 * Implements hook_theme().
 */
function recipe_theme($existing, $type, $theme, $path) {
  return array(
    'recipe_summary' => array(
      'function' => 'theme_recipe_summary',
      'variables' => array('node' => NULL, 'show_title' => TRUE),
    ),
    'recipe_duration' => array(
      'variables' => array('duration' => 0),
    ),
    'recipe_total_time' => [
      'variables' => ['total_time' => 0, 'label' => t('Total time'), 'label_display' => 'above'],
    ],
  );
}

/**
 * Implements hook_permission().
 */
function recipe_permission() {
  return array(
    'export recipes' => array(
      'title' => t('Export recipes'),
      'description' => t('Export recipes in various formats.'),
    ),
    'import recipes' => array(
      'title' => t('Import recipes'),
      'description' => t('Import recipes in various formats.'),
    ),
  );
}

/**
 * Implements hook_load().
 */
function recipe_load($nodes) {
  $result = db_query('SELECT * FROM {recipe} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->recipe_yield = $record->yield;
    $nodes[$record->nid]->recipe_yield_unit = $record->yield_unit;
  }
}

/**
 * Implements hook_insert().
 *
 * Insert a new recipe into the database.
 */
function recipe_insert($node) {
  db_insert('recipe')
    ->fields(array(
      'nid' => $node->nid,
      'yield' => $node->recipe_yield,
      'yield_unit' => $node->recipe_yield_unit,
    ))
    ->execute();
}

/**
 * Implements hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function recipe_update($node) {
  db_update('recipe')
    ->fields(array(
      'yield' => $node->recipe_yield,
      'yield_unit' => $node->recipe_yield_unit,
    ))
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_delete().
 *
 * When a node is deleted, delete the recipe and recipe node ingredient links.
 * Leave the ingredients.
 */
function recipe_delete($node) {
  db_query("DELETE FROM {recipe} WHERE nid = :nid", array(':nid' => $node->nid));
}

/**
 * Implements hook_form().
 */
function recipe_form($node, &$form_state) {
  // Title.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#maxlength' => 255,
  );

  $form['recipe_yield'] = array(
    '#type' => 'textfield',
    '#title' => t('Yield'),
    '#default_value' => !empty($node->recipe_yield) ? $node->recipe_yield : '',
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t('The number of servings the recipe will make (whole number integer, ie 5 or 6).'),
    '#required' => TRUE,
  );
  $form['recipe_yield_unit'] = array(
    '#type' => 'textfield',
    '#title' => t('Yield Units'),
    '#default_value' => empty($node->recipe_yield_unit) ? t('Servings') : $node->recipe_yield_unit,
    '#size' => 16,
    '#maxlength' => 64,
    '#description' => t('The units for the yield field(ie servings, people, cans, cookies, etc).'),
    '#required' => FALSE,
  );

  return $form;
}

/**
 * Implements hook_menu().
 */
function recipe_menu() {
  // Add a tab on the recipe add screen for Recipe Import.
  // Need to add 'file path' because some modules render node/add/recipe/std
  // even though they shouldn't.
  $items['node/add/recipe/std'] = array(
    'title' => 'Standard entry',
    'weight' => 0,
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['node/add/recipe/import'] = array(
    'title' => 'Recipe Import',
    'description' => 'Allows you to create a recipe by pasting various formats into a big text box.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recipe_import_form'),
    'access callback' => 'recipe_import_myaccess',
    'access arguments' => array('import recipes'),
    'file' => 'recipe.admin.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK
  );
  $items['recipe/export'] = array(
    'page callback' => 'recipe_export',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),  // lower level permissions are handled in recipe_export
    'file' => 'recipe.pages.inc',
  );
  // Recipe configuration and bulk import/export menus.
  $items['admin/config/content/recipe'] = array(
    'title' => 'Recipe',
    'description' => 'Settings that control how the recipe module functions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recipe_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'recipe.admin.inc',
    'weight' => 0,
  );
  $items['admin/structure/recipe'] = array(
    'title' => 'Recipe bulk import/export',
    'description' => 'Export/Import all recipes from this site to/from a supported format.',
    'page callback' => 'recipe_export_multi',
    'access callback' => 'recipe_export_multi_myaccess',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'recipe.admin.inc',
  );
  $items['admin/structure/recipe/export_multi'] = array(
    'title' => 'Recipe bulk export',
    'description' => 'Export all recipes from this site into a supported output format.',
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_LOCAL_TASK,
  );
  $items['admin/structure/recipe/import_multi'] = array(
    'title' => 'Recipe bulk import',
    'description' => 'Import all recipes from this site into a supported output format.',
    'page callback' => 'recipe_import_multi',
    'access callback' => 'recipe_import_multi_myaccess',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'recipe.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function recipe_block_info() {
  $blocks = array();
  $blocks['summary'] = array(
    'info' => t('Recipe summary'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function recipe_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'summary':
      if (user_access('access content')) {
        if (arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == '' || arg(2) == 'view')) {
          $node = node_load(arg(1));
          if ( $node->type == 'recipe' ) {
            $block['subject'] = variable_get('recipe_summary_title', t('Summary'));
            $block['content'] = theme('recipe_summary', array('node' => $node, 'show_title' => FALSE, 'show_yield_form' => TRUE));
            return $block;
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_view().
 */
function recipe_view($node, $view_mode) {
  drupal_add_css(drupal_get_path('module', 'recipe') . '/recipe.css');

  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Recipes'), 'recipe');
    drupal_set_breadcrumb($breadcrumb);
  }

  // Prepare and sanitize node fields.
  recipe_node_sanitize($node);

  // Calculate yield and ingredient factor.

  // Get custom yield or default to a factor of 1.
  $node->recipe_yield = intval($node->recipe_yield);
  // Factor is calculated and added into the $node variable.
  $node->recipe_factor = 1;

  // check post variable to see if the yield form was posted.
  if ( $node->recipe_yield != 0 && isset($_POST['op'])) {
    if ($_POST['op'] == t('Change')) {
      $node->recipe_factor = $_POST['custom_yield'] / $node->recipe_yield;
      $node->recipe_yield = $_POST['custom_yield'];
      $_POST = array();
    }
    elseif ($_POST['op'] == t('Halve')) {
      $node->recipe_factor = $_POST['custom_yield']/2 / $node->recipe_yield;
      $node->recipe_yield = $_POST['custom_yield']/2;
      $_POST = array();
    }
    elseif ($_POST['op'] == t('Double')) {
      $node->recipe_factor = $_POST['custom_yield']*2 / $node->recipe_yield;
      $node->recipe_yield = $_POST['custom_yield']*2;
      $_POST = array();
    }
    // Reset yield back to recipe default
    elseif ($_POST['op'] == t('Reset')) {
      $_POST = array();
    }
  }
  // Custom_yield comes from export single urls currently.
  elseif (isset($node->recipe_custom_yield)) {
    $node->recipe_factor = $node->recipe_custom_yield / $node->recipe_yield;
    $node->recipe_yield = $node->recipe_custom_yield;
  }

  // If it is a teaser, you're done.
  // The teaser should have a full $node object, but not the $node->content render array.
  if ($view_mode == 'teaser') {
    return $node;
  }

  if ( isset($node->in_preview) && $node->in_preview == 1 ) {
    $node->recipe_show_yield_form = FALSE;
  }
  $node->content['recipe_summary_box'] = array(
      '#markup' => theme('recipe_summary', array('node' => $node, 'show_yield_form' => isset($node->recipe_show_yield_form) ? $node->recipe_show_yield_form : TRUE)),
  );

  return $node;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * @todo Make integer fields configurable as time sub-fields.
 * @todo Make the label configurable.
 * @todo Make the label_display configurable.
 */
function recipe_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Calculate the total time required to make the recipe.
  $prep_time = $entity->recipe_prep_time->value;
  $cook_time = $entity->recipe_cook_time->value;
  $total_time = [
    '#theme' => 'recipe_duration',
    '#duration' => $prep_time + $cook_time,
  ];
  $build['recipe_total_time'] = [
    '#theme' => 'recipe_total_time',
    '#label' => t('Total time'),
    '#label_display' => 'above',
    '#total_time' => $total_time,
  ];

  /*if ( isset($node->in_preview) && $node->in_preview == 1 ) {
    return;
  }

  if ($node->type == 'recipe' && $view_mode != 'rss' && $view_mode != 'teaser') {
    $formats = module_invoke_all('recipeio', 'export_single');
    $links = array();
    foreach ($formats as $key => $format) {
      $perm = isset($format['access arguments']) ? $format['access arguments'] : 'export recipes';
      if (user_access($perm)) {
        $links[$key] = array(
          'title' => $format['format_name'],
          'href' => "recipe/export/$key/$node->nid/" . $node->recipe_yield,
          'attributes' => array('title' => $format['format_help']),
        );
      }
    }

    if (!empty($links)) {
      array_unshift($links, array('title' => '<br/>' . t('Export to') . ':', 'html' => TRUE));
      $node->content['links']['recipe'] = array(
        '#theme' => 'links__recipe__node',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }*/
}

/**
 * Prepares variables for the recipe_total_time template.
 *
 * Default template: recipe_total_time.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - total_time: The content of the pseudo-field.
 *   - label: A string containing the pseudo-field's title.
 *   - label_display: The display settings for the label.
 */
function template_preprocess_recipe_total_time(&$variables, $hook) {
  // Add the RDF metadata to the content_attributes.
  $mapping = [
    'properties' => ['schema:totalTime'],
    'datatype' => 'xsd:duration',
    'datatype_callback' => ['callable' => 'recipe_duration_iso8601'],
  ];
  $variables['content_attributes'] = rdf_rdfa_attributes($mapping, $variables['total_time']['#duration']);

  $variables['label_hidden'] = ($variables['label_display'] == 'hidden');
}

/**
 * Returns HTML for displaying the recipe summary box.
 */
function theme_recipe_summary($variables) {
  $node = $variables['node'];
  $show_title = isset($variables['show_title']) ? $variables['show_title'] : FALSE;
  $show_yield_form = isset($variables['show_yield_form']) ? $variables['show_yield_form'] : TRUE;
  // Construct the summary
  $output = '<div class="recipe-summary">';

  if ( $show_title ) {
    $output .= '<h2 class="title">' . t('Summary') . '</h2>';
  }

  $output .= '<table>';

  // Render the yield form.
  $yield_form = drupal_get_form('recipe_yield_form', $node, $show_yield_form);
  $output .= '<tr><th class="summary-title">' . t('Yield') . '</th><td class="summary-data">' . drupal_render($yield_form) . '</td></tr>';

  // Print the total time if the prep and cook times are set.
  if (isset($node->recipe_cook_time[LANGUAGE_NONE][0]['value']) && isset($node->recipe_prep_time[LANGUAGE_NONE][0]['value'])) {
    $duration = $node->recipe_cook_time[LANGUAGE_NONE][0]['value'] + $node->recipe_prep_time[LANGUAGE_NONE][0]['value'];
    $_text = theme('recipe_duration', array('duration' => $duration));
    // Wrap the total time in RDFa markup.
    if (!empty($node->rdf_mapping['recipe_totaltime'])) {
      $attributes = rdf_rdfa_attributes($node->rdf_mapping['recipe_totaltime']);
      $attributes['content'] = array(recipe_duration_iso8601($duration));
      $_text = theme('rdf_template_variable_wrapper', array('content' => $_text, 'attributes' => $attributes, 'inline' => FALSE));
    }

    $output .= '<tr><th>' . t('Total time') . '</th><td>' . $_text . '</td></tr>';
  }

  $output .= '</table>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_validate().
 *
 * Errors should be signaled with form_set_error().
 */
function recipe_validate($node, $form, &$form_state) {
  $return = TRUE;
  if (!is_numeric($form_state['values']['recipe_yield']) || $form_state['values']['recipe_yield'] <=0) {
    form_set_error('recipe_yield', t('Yield must be a valid positive integer.'));
    $return = FALSE;
  }

  return $return;
}

/**
 * Sanitizes recipe data for display.
 *
 * All recipe fields should be run through one of the Drupal data checks.
 */
function recipe_node_sanitize(&$node) {
  if (!empty($node->recipe_yield_unit)) {
    $node->recipe_yield_unit = filter_xss($node->recipe_yield_unit, array());
  }
}

/**
 * Form constructor for the custom yield form.
 *
 * @param stdClass $node
 *   The node object being displayed.
 * @param Bool $show_yield_form
 *   TRUE if the custom yield form should be displayed.
 */
function recipe_yield_form($form, &$form_state, $node, $show_yield_form) {
  // Don't render the custom yield textbox and submit buttons if disabled or shown in a block.

  if ($show_yield_form == FALSE || variable_get('recipe_summary_location', 0) == 1 ) {
    $form['yield'] = array(
      '#markup' => $node->recipe_yield,
    );
    // An html space is useful here since we don't have a separate theme function for this form.
    $form['_space'] = array(
      '#markup' => '&nbsp;',
    );
    $form['yield_unit'] = array(
      '#markup' => ($node->recipe_yield_unit == '')?t('Servings'):$node->recipe_yield_unit,
    );
  }

  // Render the custom yield textbox and submit buttons.
  else {
    $form['custom_yield'] = array(
      '#type' => 'textfield',
      '#default_value' => $node->recipe_yield,
      '#size' => 2,
      '#maxlength' => 4,
      '#attributes' => array('class' => array('recipe-yield-value')),
    );
    $form['yield_unit'] = array(
      '#markup' => ($node->recipe_yield_unit == '')?t('Servings'):$node->recipe_yield_unit,
      '#suffix' => '<br/>',
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Change'),
      '#attributes' => array('class' => array('recipe-yield-change')),
    );
    $form['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
      '#attributes' => array('class' => array('recipe-yield-reset')),
    );
    $form['halve'] = array(
      '#type' => 'submit',
      '#value' => t('Halve'),
      '#attributes' => array('class' => array('recipe-yield-halve')),
    );
    $form['double'] = array(
      '#type' => 'submit',
      '#value' => t('Double'),
      '#attributes' => array('class' => array('recipe-yield-double')),
    );
  }

  return $form;
}

/**
 * Extends user_access to handle the case where no import formats are available.
 */
function recipe_import_myaccess($string, $account = NULL, $reset = FALSE) {
  // short circuit if there are no parsers available.
  $formats = module_invoke_all('recipeio', 'import_single');
  if (count($formats) == 0) {
    return FALSE;
  }
  // we have a format so continue to user_access
  return user_access($string, $account, $reset);
}

/**
 * Extends user_access to handle the case where no export formats are available.
 */
function recipe_export_multi_myaccess($string, $account = NULL, $reset = FALSE) {
  // short circuit if there are no parsers available.
  $formats = module_invoke_all('recipeio', 'export_multi');
  if (count($formats) == 0) {
    return FALSE;
  }
  // we have a format so continue to user_access
  return user_access($string, $account, $reset);
}

/**
 * Extends user_access to handle the case where no import formats are available.
 */
function recipe_import_multi_myaccess($string, $account = NULL, $reset = FALSE) {
  // short circuit if there are no parsers available.
  $formats = module_invoke_all('recipeio', 'import_multi');
  if (count($formats) == 0) {
    return FALSE;
  }
  // we have a format so continue to user_access
  return user_access($string, $account, $reset);
}

/**
 * Sanitizes a string and encodes the &deg; symbol.
 */
function strip_html_and_encode_entities($string) {
  $string = filter_xss($string, array());
  $string = str_replace("&deg;", "\xB0", $string);
  return $string;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function recipe_entity_extra_field_info() {
  $extra = [];

  $extra['node']['recipe']['display']['recipe_total_time'] = [
    'label' => t('Total time'),
    'description' => t('The total time required to make the recipe.'),
    'weight' => -1,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Checks a string for ISO-8859-1 chars and encodes them to UTF-8.
 *
 * @param string $in_str
 *   A string with possible ISO-8859-1 chars.
 * @return string
 *   A UTF8 string representation of $in_str.
 */
function fixEncoding($in_str) {
  $cur_encoding = mb_detect_encoding($in_str) ;
  if ($cur_encoding == "UTF-8" && mb_check_encoding($in_str, "UTF-8")) {
    return $in_str;
  }
  else {
    return utf8_encode($in_str);
  }
}

function template_preprocess_recipe_duration(&$variables) {
  $hours = floor($variables['duration'] / 60);
  $minutes = $variables['duration'] % 60;
  $variables['hours'] = '';
  $variables['minutes'] = '';
  if ($hours > 0) {
    $variables['hours'] = \Drupal::translation()->formatPlural($hours, '1 hour', '@count hours');
  }
  if ($minutes > 0 || $variables['duration'] == 0) {
    $variables['minutes'] = \Drupal::translation()->formatPlural($minutes, '1 minute', '@count minutes');
  }
}

/**
 * Returns a duration string in ISO 8601 format.
 *
 * @param $duration
 *   An integer or array with 'value' element representing a time duration.
 * @return string
 *   A string representing a time duration in ISO 8601 format.
 */
function recipe_duration_iso8601($duration = 0) {
  if (is_array($duration) && isset($duration['value'])) {
    $duration = $duration['value'];
  }
  $hours = floor($duration / 60);
  $minutes = $duration % 60;
  $output = '';
  if ($hours > 0) {
    $output .= $hours . 'H';
  }
  if ($minutes > 0) {
    $output .= $minutes . 'M';
  }
  return empty($output) ? 'PT0M' : 'PT' . $output;
}
