<?php
// $Id$

function recipe_perm() {
  return array ("create recipes", 'edit own recipes');
}

function recipe_load($node) {
  $recipe = db_fetch_object(db_query("SELECT * FROM {recipe} WHERE nid = '$node->nid'"));
  $ingredients = db_query("SELECT ingredient, weight FROM {recipe_ingredients} WHERE nid='$node->nid' ORDER BY weight");
  while ($ingredient = db_fetch_object($ingredients)) {
    $recipe->ingredients[$ingredient->weight]  = $ingredient->ingredient;
  }
  return $recipe;
}

function recipe_node_name() {
  return("recipe");
}

function recipe_help($section = '') {
  $output ="";

  switch ($section) {
     case 'admin/help#recipe':
      break;
    case 'admin/modules/recipe':
    case 'admin/modules#description':
      $output = t("Collect and display recipes");
      break;
    case 'node/add#recipe':
      $output = t("Share your favorite recipes with your fellow cooks.");
      break;
    case 'node/add/recipe':
      $output = variable_get("recipe_help", "");;
      break;
  }
  return $output;
}

function recipe_nodeapi(&$node, $op, $arg) {
  if ($node->type == "recipe") {
    switch ($op) {
      case 'validate':
        // $node->teaser = $node->instructions;
        $body = array($node->instructions, $node->source, $node->yield, $node->preptime, $node->notes);
        $body = array_merge($body, $node->ingredients);
        $node->body = '<p>'. implode('</p><p>', $body). '</p>';
      case "fields":
        break;
      case "insert":
        db_query("INSERT INTO {recipe} (nid, source, yield, preptime, notes, instructions) VALUES ('$node->nid', '%s', '%s', '%s', '%s', '%s')", $node->source, $node->yield, $node->preptime, $node->notes, $node->instructions);
        foreach ($node->ingredients as $weight => $ingredient) {
          if ($ingredient) {
            db_query("INSERT INTO {recipe_ingredients} (nid, ingredient, weight) VALUES (%d, '%s', %d)", $node->nid, $ingredient, $weight);
          }
        }
        break;
      case "update":
        db_query("UPDATE {recipe} SET source = '%s', yield = '%s', preptime = '%s', notes = '%s', instructions = '%s' WHERE nid = %d", $node->source, $node->yield, $node->preptime, $node->notes, $node->instructions, $node->nid);
        db_query("DELETE FROM {recipe_ingredients} WHERE nid = '$node->nid'");
        $i = 0;
        foreach ($node->ingredients as $ingredient) {
          if ($ingredient) {
            db_query("INSERT INTO {recipe_ingredients} (nid, ingredient, weight) VALUES (%d, '%s', %d)", $node->nid, $ingredient, $i);
            $i++;
          }
        }
        break;
      case "delete":
        db_query("DELETE FROM {recipe} WHERE nid = %d", $node->nid);
        db_query("DELETE FROM {recipe_ingredients} WHERE nid = %d", $node->nid);
        break;
    }
  }
}

function recipe_form($node) {
  $op = arg(1);
  $edit = $_POST["edit"];

  if ($edit["recipe_more_ingredients"] == 1) {
    $node->numingredients = $node->numingredients + 6;
  }
  elseif ($node->ingredients) {
    $node->numingredients = count($node->ingredients);
  }
  else {
    $node->numingredients = 6;
  }
  $output .= form_hidden("numingredients", $node->numingredients);
  $output .= form_textfield(t("Servings"), "yield", $node->yield, 60, 127, t("Describe how many servings this recipe will yield. Feel free to be creative."));
  $output .= form_select(t("Preparation time"), "preptime", $node->preptime, array (15 => "15 minutes", 30 => "30 minutes", 45 => "45 minutes", 60 => "1 hour", 90 => "1 1/2 hours", 120 => "2 hours", 150 => "2 1/2 hours", 180 => "3 hours", 210 => "3 1/2 hours", 240 => "4 hours", 300 => "5 hours", 360 => "6 hours"), t("How long does this recipe take to prepare (i.e. elapsed time)"));
  $output .= form_item(t("Example Ingredients"), t("1 bunch kale or Swiss chard, stems and ribs removed, leaves sliced"). "<br>". t("3 white potatoes - peeled and diced"));
  $output .= form_item(t("Recipe Ingredients"), "");
  for ($i = 0; $i < $node->numingredients; $i++) {
    $output .= form_textfield("", "ingredients][$i", $node->ingredients[$i], 60, 127, "");
  }
  $output .= form_checkbox(t("add more ingredients"), "recipe_more_ingredients", 1, 0, t("If you need to add more ingredients, check this box and click "). "<b>". t("Preview"). "</b>");
  $output .= form_textarea(t("Cooking Instructions"), "instructions", $node->instructions, 60, 18, t("Include a brief description of your recipe at the top of your instructions."));
  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("recipe", $node));
  }
  $output .= form_textfield(t("Source"), "source", $node->source, 60, 127, t("Optional. Does anyone else deserve credit for this recipe?"));
  $output .= form_textarea(t("Additional Notes"), "notes", $node->notes, 60, 5, t("Optional. Describe a great dining experience relating to this recipe, or note which wine or other dishes complement this recipe"));
  $output .= filter_form('format', $node->format);
  return $output;

}

function recipe_menu($may_cache) {
  if ($may_cache) {
    $items[] = array('path' => 'node/add/recipe', 'title' => t('recipe'), 'access' => user_access('create recipes'));
    $items[] = array('path' => 'recipe', 'title' => t('recipes'), 'callback' => 'recipe_page', 'access' => user_access('access content'), 'type' => MENU_SUGGESTED_ITEM);
  }
  else {
    drupal_set_html_head(recipe_html_head());
  }
  return $items ? $items : array();
}

function recipe_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create recipes');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own recipes') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}


function recipe_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $blocks[0]["info"] = t("Newest 10 recipes");
    return $blocks;
  }
  elseif ($op == 'view') {
    $block["subject"] = t("Newest Recipes");
    $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.uid, u.name FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE n.type='recipe' ORDER BY n.nid DESC"), 0, 10);
    $block["content"] = node_title_list($result);
    return $block;
  }
}

function recipe_settings() {
 $output .= form_textarea(t("Explanation or submission guidelines"), "recipe_help", variable_get("recipe_help", ""), 55, 4, t("This text will be displayed at the top of the recipe submission form.  Useful for helping or instructing your users."));
 return $output;
}

function recipe_page() {
  $op = arg(1);

  if ($op == "feed") {
    recipe_feed(); // not yet implemented
    return;
  }
  elseif ($op == "css") {
    print recipe_css();
  }
  else {
    print theme("page", recipe_overview());
  }
}


function recipe_overview() {
  // no longer possible with 4.6 search. need to find a new way
  /*if (module_exist('search')) {
    $output .= search_type("recipe", url("search"), NULL, 1);
  }*/
  $output .= recipe_list();
  if (module_exist("taxonomy_dhtml") && $content = recipe_directory_dhtml()) {
    $output .= $content;
  }
  return $output;
}

function recipe_directory_dhtml() {
  $boxes = taxonomy_dhtml_overview("recipe");
  foreach ($boxes as $box) {
    $output .= "<span class=\"recipe\"><span class=\"label\">". $box["subject"]. "</span></span><br />". $box["content"];
  }
  return $output;
}

function recipe_list() {
  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.title, n.uid, u.name, r.notes FROM {node} n INNER JOIN {users} u ON n.uid=u.uid INNER JOIN {recipe} r ON n.nid = r.nid WHERE n.type = 'recipe' ORDER BY n.created DESC"), 20);
  
  $header = array(t("Title"), t("Author"), t('Notes'));

  while ($node = db_fetch_object($result)) {
      $rows[] = array(
        array("data" => l($node->title, "node/$node->nid")),
        array("data" => format_name($node)),
        array("data" => $node->notes),
        // array("data" => ($num = comment_num_all($node->nid)) ? $num : "&nbsp;")
      );
  }

  if (!$rows) {
    $rows[] = array(array("data" => t("No recipes available."), "colspan" => "3"));
  }

  $pager = theme("pager", NULL, 20, 0);
  if (!empty($pager)) {
    $rows[] = array(array("data" => $pager, "colspan" => "3"));
  }

  return theme('table', $header, $rows);
}

function recipe_view(&$node, $teaser = 0, $page = 0) {
  $node = recipe_content($node, $teaser);
  drupal_set_breadcrumb(array(l(t('Home'), ''), l('Recipes', 'recipe')));
}

function recipe_content($node, $teaser = 0) {
  $preptime = t("%n hours", array ("%n" => ($node->preptime / 60)));
  $output = "<div class=\"recipe\">\n";
  $output .= "  <div class=\"row\"><div class=\"label\">Servings:</div>\n";
  $output .= "  <div class=\"servings\">$node->yield</div></div>\n";
  $output .= "  <div class=\"row\"><div class=\"label\">Preparation Time:</div>\n";
  $output .= "  <div class=\"preptime\">$preptime</div></div>\n";
  $output .= "<div class=\"ingredients\">". theme('item_list', $node->ingredients, t('Ingredients')). "</div>";
  $output .= "  <div class=\"row\"><div class=\"label\">Cooking Instructions</div>\n";
  $output .= "  <div class=\"instructions\">$node->instructions</div></div>\n";
  if ($node->source) {
    $output .= "  <div class=\"row\"><div class=\"label\">Source:</div>\n";
    $output .= "  <div class=\"source\">$node->source</div></div>\n";
  }
  if ($node->notes) {
    $output .= "  <div class=\"label\">Notes</div>\n";
    $output .= "  <div class=\"notes\">$node->notes</div>\n";
  }
  $output .= '</div>';
  // $node->body = strtr($output, "\n", ""); //remove newlines now or else face wrath of nl2br() later
  $node->body = $output;
  return node_prepare($node, $teaser);
}

function recipe_html_head() {
 $style = "<style type=\"text/css\">\n";
 $style .= "  .recipe .row { margin-bottom: .3em; } \n";
 $style .= "  .recipe .label { padding-right: 5px; font-weight: bold; float: left; }\n";
 $style .= "  .recipe .notes { clear: both; padding-left: 10px; padding-top: 5px;  }\n";
 $style .= "  .recipe .ingredients {}\n";
 $style .= "  .recipe .instructions { clear: both; padding-left: 10px; padding-top: 10px; }\n";
 $style .= "</style>";
 return $style;
}


?>
