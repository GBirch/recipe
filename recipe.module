<?php

function recipe_perm() {
  return array ("access recipes", "create recipes");
}

function recipe_access($op, $node) {
  if ($op == "view" && user_access("access recipes")) {
    return $node->status;
  }

  if ($op == "create") {
    return user_access("create recipes");
  }
}

function recipe_load($node) {
  $recipe = db_fetch_object(db_query("SELECT * FROM recipe WHERE nid = '$node->nid'"));
  $ingredients = db_query("SELECT ingredient, weight FROM recipe_ingredients WHERE nid='$node->nid' ORDER BY weight");
  while ($ingredient = db_fetch_object($ingredients)) {
    $recipe->ingredients[$ingredient->weight]  = $ingredient->ingredient;
  }
  return $recipe;
}

function recipe_node($field) {
  $info["name"] = t("recipe");
  $info["description"] = t("Share your favorite recipes with your fellow cooks.");
  return $info[$field];
}

// not working for some reason. please fix.
function recipe_help($section) {
  $output ="";

  switch ($section) {
     case 'admin/help#recipe':
      break;
    case 'admin/system/modules/recipe':
    case 'admin/system/modules#recipe':
      $output .= t("Collect and display recipes");
      break;
  }
  return $output;
}

function recipe_nodeapi(&$node, $op, $arg) {
  
  if ($node->type == "recipe") {
    switch ($op) {
      case "fields":
        break;
      case "insert":
        db_query("INSERT INTO recipe (nid, source, yield, preptime, notes) VALUES ('$node->nid', '%s', '%s', '%s', '%s')", $node->source, $node->yield, $node->preptime, $node->notes);
        foreach ($node->ingredients as $weight => $ingredient) {
          if ($ingredient) {      
            db_query("INSERT INTO recipe_ingredients (nid, ingredient, weight) VALUES (%d, '%s', %d)", $node->nid, $ingredient, $weight);
          }
        }  
        break;
      case "update":
        db_query("UPDATE recipe SET source = '%s', yield = '%s', preptime = '%s', notes = '%s' WHERE nid = %d", $node->source, $node->yield, $node->preptime, $node->notes, $node->nid);
        db_query("DELETE FROM recipe_ingredients WHERE nid = '$node->nid'");
        $i = 0;    
        foreach ($node->ingredients as $ingredient) {
          if ($ingredient) {      
            db_query("INSERT INTO recipe_ingredients (nid, ingredient, weight) VALUES (%d, '%s', %d)", $node->nid, $ingredient, $i);
            $i++;
          }
        }  
        break;  
      case "delete":
        db_query("DELETE FROM recipe WHERE nid = %d", $node->nid);
        db_query("DELETE FROM recipe_ingredients WHERE nid = %d", $node->nid);
        break;
    }
  }
}

function recipe_form(&$node, &$help, &$error) {
  $op = arg(1);
  $edit = $_POST["edit"];
  
  if ($edit["recipe_more_ingredients"] == 1) {
    $node->numingredients = $node->numingredients + 6;
  }
  elseif ($node->ingredients) {
    $node->numingredients = count($node->ingredients);
  }  
  else {
    $node->numingredients = 6;    
  } 
  
  $help = t(variable_get("recipe_help", ""));

  $output .= form_hidden("numingredients", $node->numingredients);
  $output .= form_textfield(t("Servings"), "yield", $node->yield, 60, 127, $error["yield"] ? $error["yield"] : t("Describe how many servings this recipe will yield. Feel free to be creative."));
  $output .= form_select(t("Preparation time"), "preptime", $node->preptime, array (15 => "15 minutes", 30 => "30 minutes", 45 => "45 minutes", 60 => "1 hour", 90 => "1 1/2 hours", 120 => "2 hours", 150 => "2 1/2 hours", 180 => "3 hours", 210 => "3 1/2 hours", 240 => "4 hours", 300 => "5 hours", 360 => "6 hours"), t("How long does this recipe take to prepare (i.e. elapsed time)"));
  $output .= form_item(t("Example Ingredients"), t("1 bunch kale or Swiss chard, stems and ribs removed, leaves sliced"). "<br>". t("3 white potatoes - peeled and diced"));
  $output .= form_item(t("Recipe Ingredients"), "");
  for ($i = 0; $i < $node->numingredients; $i++) {
    $output .= form_textfield("", "ingredients][$i", $node->ingredients[$i], 60, 127, "");
  }
  $output .= form_checkbox(t("add more ingredients"), "recipe_more_ingredients", 1, 0, t("If you need to add more ingredients, check this box and click "). "<b>". t("Preview"). "</b>"); 
  $output .= form_textarea(t("Cooking Instructions"), "body", $node->body, 60, 18, $error["body"] ? $error["body"] : t("Include a brief description of your recipe at the top of your instructions."));
  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("recipe", $node));
  }
  $output .= form_textfield(t("Source"), "source", $node->source, 60, 127, $error["source"] ? $error["source"] : t("Optional. Does anyone else deserve credit for this recipe?"));
  $output .= form_textarea(t("Additional Notes"), "notes", $node->notes, 60, 5, $error["notes"] ? $error["notes"] : t("Optional. Describe a great dining experience relating to this recipe, or note which wine or other dishes complement this recipe"));  
  return $output;
  
}

function recipe_link($type) {

  if ($type == "system") {
    if (user_access("create recipes")) {
      menu("node/add/recipe", t("recipe"), "recipe_page", 0);
    }
  }

  if ($type == "page" && user_access("access recipes")) {
    $links[] = l(t("recipes"), "recipe", array ("title" => t("View the collection of recipes.")));
  }
  return $links ? $links : array();  
}


function recipe_block($op = "list", $delta = 0) {
  if($op == "list") {
    $blocks[0]["info"] = t("Newest 10 recipes");
    return $blocks;
  }
  else {
    if (user_access("access recipes")) {
      $block["subject"] = t("Newest Recipes");
      $result = db_query_range("SELECT n.nid, n.title, n.uid, u.name FROM node n LEFT JOIN users u ON n.uid = u.uid WHERE n.status = 1 AND n.type='recipe' ORDER BY n.nid DESC", 0, 10);
      $block["content"] = theme("node_title_list", $result);  
      return $block;
    }  
  }
}  

function recipe_settings() {
 $output .= form_textarea(t("Explanation or submission guidelines"), "recipe_help", variable_get("recipe_help", ""), 55, 4, t("This text will be displayed at the top of the recipe submission form.  Useful for helping or instructing your users."));
 return $output;
}

function recipe_page() {
  $op = arg(1);

  if (user_access("access recipes")) {
    if ($op == "feed") {
      recipe_feed(); // not yet implemented    
      return;
    }
    elseif ($op == "css") {
      print recipe_css();
    }
    else {
      $boxes = recipe_overview();
      print theme("header");
      foreach ($boxes as $box) {
        print theme("box", $box["subject"], $box["content"]);
      }  
      print theme("footer");
      }
  }
  else {
    print theme("header");
    message_access();
    print theme("footer");
  }  
}


function recipe_overview() {
  $i = 0;
  $boxes[$i]["subject"] = t("Search Recipes");
  $boxes[$i]["content"] = search_type("recipe", url("recipe"));
  $i++;
  
  if (module_exist("taxonomy_dhtml")) {
    $boxes[$i] = array ("subject" => t("Recipes by category"), "content" => recipe_directory_dhtml());
    $i++;
  }  
  $boxes[$i] = array ("subject" => t("All recipes"), "content" => recipe_list());
  return $boxes;
}

function recipe_directory_dhtml() {
  $boxes = taxonomy_dhtml_overview("recipe");
  foreach ($boxes as $box) {
    $output .= "<span class=\"recipe_label\">". $box["subject"]. "</span><br />". $box["content"];
  }
  return $output;
}  

function recipe_list() {
  $result = pager_query("SELECT n.nid, n.title, n.uid, u.name, r.preptime FROM recipe r INNER JOIN node n ON r.nid = n.nid LEFT JOIN users u ON n.uid = u.uid WHERE n.status=1 ORDER BY n.nid DESC");
  $header = array(t("Title"), t("Chef"), t("Comments"), t("Preparation time"));
  $i=0;
  while ($node = db_fetch_object($result)) {
    $rows[$i][] = l($node->title, "node/view/$node->nid");
    $rows[$i][] = format_name($node);
    $rows[$i][] = ($num = comment_num_all($node->nid)) ? $num : "&nbsp;";    
    $rows[$i][] = $node->preptime;
    $i++;
  }
  if ($pager = pager_display(NULL, 50)) {
    $rows[] = array(array("data" => $pager, "colspan" => 3));
  }
  return theme("table", $header, $rows);
}  

function recipe_view($node, $main = 0) {
  if ($main == 0) {
    // Breadcrumb navigation
    $breadcrumb[] = l(t("Home"), NULL);
    $breadcrumb[] = l(t("Recipes"), "recipe");
    print theme("breadcrumb", $breadcrumb);
  }
  $node = recipe_content($node);
  // print the node
  print theme("node", $node, $main);
}

function recipe_content($node) {
  
  $preptime = t("%n hours", array ("%n" => ($node->preptime / 60)));  
  $output = "<div class=\"recipe\">\n";
  $output .= "  <div class=\"row\"><div class=\"label\">Servings:</div>\n";
  $output .= "  <div class=\"servings\">$node->yield</div></div>\n";
  $output .= "  <div class=\"row\"><div class=\"label\">Preparation Time:</div>\n";
  $output .= "  <div class=\"preptime\">$preptime</div></div>\n";
  $output .= "  <div class=\"row\"><div class=\"label\">Ingredients:</div>\n";
  $output .= "  <div class=\"ingredients\">". theme_item_list($node->ingredients). "</div></div>\n";
  $output .= "  <div class=\"row\"><div class=\"label\">Cooking Instructions</div>\n";
  $output .= "  <div class=\"instructions\">$node->body</div></div>\n";
  if ($node->source) {
    $output .= "  <div class=\"row\"><div class=\"label\">Source:</div>\n";
    $output .= "  <div class=\"source\">$node->source</div></div>\n";
  }
  if ($node->notes) {
    $output .= "  <div class=\"label\">Notes</div>\n";
    $output .= "  <div class=\"notes\">$node->notes</div>\n";
  }
  $output .= '</div>';
  // $node->body = strtr($output, "\n", ""); //remove newlines now or else face wrath of nl2br() later
  $node->body = $output;
  return $node;
}

function recipe_head($main = 0) {
 $style = "<style type=\"text/css\">\n";
 $style .= "  .recipe .row { margin-bottom: .3em; } \n";
 $style .= "  .recipe .label { padding-right: 5px; font-weight: bold; float: left; }\n";
 $style .= "  .recipe .ingredients, .recipe .notes, .recipe .instructions { clear: both; padding: 10px 10px 10px 10px; }\n";
 $style .= "</style>";
 return array($style); 
}

function recipe_update_index() {

  // Return an array of values to dictate how to update the search index
  // for this particular type of node.
  //
  // "last_update"'s value is used with variable_set to set the
  // last time this node type had an index update run.
  //
  // "node_type"'s value is used to identify the node type in the search
  // index.
  //
  // "select"'s value is used to select the node id and text fields from
  // the table we are indexing.
  
  return array("last_update" => "recipe_cron_last",
         "node_type" => "recipe",
         "select" => "SELECT n.nid as lno, n.title as text1, CONCAT(n.body, ' ', r.notes, ' ', r.source, ' ', r.yield, ' ', r.preptime) as text2 FROM node n INNER JOIN recipe r ON n.nid = r.nid WHERE n.status = 1 AND n.moderate = 0 AND (n.created > " . variable_get("recipe_cron_last", 1) . " OR changed > " . variable_get("recipe_cron_last", 1) . ")");
}

function recipe_search($keys) {

  /*
  ** Return the results of performing a search using the indexed search
  ** for this particular type of node.
  **
  ** Pass an array to the "do_search" function which dictates what it
  ** will search through, and what it will search for
  **
  ** "keys"'s value is the keywords entered by the user
  **
  ** "type"'s value is used to identify the node type in the search
  ** index.
  **
  ** "select"'s value is used to relate the data from the specific nodes
  ** table to the data that the search_index table has in it, and the 
  ** do_search functino will rank it.
  **
  ** The select must always provide the following fields - lno, title,
  ** created, uid, name, count
  **
  ** The select statement may optionally provide "nid", which is a secondary
  ** identifier which is currently used by the comment module.
  */

  $find = do_search(array("keys" => $keys, "type" => "node", "select" => "SELECT s.lno AS lno, n.title AS title, n.created AS created, u.uid AS uid, u.name AS name, s.count AS count FROM search_index s, node n LEFT JOIN users u ON n.uid = u.uid WHERE s.lno = n.nid AND s.type = 'recipe' AND n.status = 1 AND s.word like '%'"));

  return $find;
}


?>
